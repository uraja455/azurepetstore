# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - petstore/petstoreproductservice/*

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '7d4ca43b-fc64-4dcd-851d-4e88cab89846'
  imageRepository: 'petstoreproductservice'
  containerRegistry: 'petstoreacruk.azurecr.io'
  dockerfilePath: 'petstore/petstoreproductservice/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: '$(crImagePullSecretGlobal)'

stages:
- stage: Build
  displayName: Build stage
  jobs: 
  - job: Build
    displayName: Build App
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: echo -n -e "{\"version\":\"$(Build.BuildNumber) - $(tag)\"}" > petstore/petstoreproductservice/src/main/resources/version.json

    - task: Maven@3
      continueOnError: true 
      displayName: Build Spring Boot Jar
      inputs:
        mavenPomFile: 'petstore/petstoreproductservice/pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: 'petstore/petstoreproductservice/target/surefire-reports/TEST-*.xml'
        codeCoverageToolOption: 'jaCoCo'
        goals: 'package'
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
          
    - upload: manifests
      artifact: manifests


- stage: Deploy
  displayName: Deploy Stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy App
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'uraja455azurepetstore.ingress-petstoreservices'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              kubernetesServiceConnection: 'azurepetstore-akscluster-ingress-petstoreservices'
              namespace: 'ingress-petstoreservices'
              manifests: |
                $(Pipeline.Workspace)/manifests/petstoreproductservice-deployment-everything-enabled.yml
                $(Pipeline.Workspace)/manifests/petstoreproductservice-service-everything-enabled.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)